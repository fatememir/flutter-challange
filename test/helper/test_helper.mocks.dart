// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_challange_arman/test/helper/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i2;
import 'package:flutter_challange_arman/core/error/exception/failure.dart'
    as _i6;
import 'package:flutter_challange_arman/features/login/data/datasource/login_remote_datasource.dart'
    as _i9;
import 'package:flutter_challange_arman/features/login/data/model/login_data_model.dart'
    as _i3;
import 'package:flutter_challange_arman/features/login/domain/entity/auth_entity.dart'
    as _i7;
import 'package:flutter_challange_arman/features/login/domain/model/login_body_model.dart'
    as _i8;
import 'package:flutter_challange_arman/features/login/domain/repository/login_repository.dart'
    as _i4;
import 'package:flutter_challange_arman/features/login/domain/usecase/login.dart'
    as _i10;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLoginDataModel_1 extends _i1.SmartFake
    implements _i3.LoginDataModel {
  _FakeLoginDataModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLoginRepository_2 extends _i1.SmartFake
    implements _i4.LoginRepository {
  _FakeLoginRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LoginRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginRepository extends _i1.Mock implements _i4.LoginRepository {
  MockLoginRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.AuthEntity>> login(
          _i8.LoginBodyModel? loginBodyModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [loginBodyModel],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, _i7.AuthEntity>>.value(
            _FakeEither_0<_i6.Failure, _i7.AuthEntity>(
          this,
          Invocation.method(
            #login,
            [loginBodyModel],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i7.AuthEntity>>);
}

/// A class which mocks [LoginRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginRemoteDataSource extends _i1.Mock
    implements _i9.LoginRemoteDataSource {
  MockLoginRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.LoginDataModel> login(_i8.LoginBodyModel? loginBodyModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [loginBodyModel],
        ),
        returnValue: _i5.Future<_i3.LoginDataModel>.value(_FakeLoginDataModel_1(
          this,
          Invocation.method(
            #login,
            [loginBodyModel],
          ),
        )),
      ) as _i5.Future<_i3.LoginDataModel>);
}

/// A class which mocks [Login].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogin extends _i1.Mock implements _i10.Login {
  MockLogin() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.LoginRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeLoginRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.LoginRepository);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.AuthEntity>> call(
          _i8.LoginBodyModel? loginBodyModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [loginBodyModel],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, _i7.AuthEntity>>.value(
            _FakeEither_0<_i6.Failure, _i7.AuthEntity>(
          this,
          Invocation.method(
            #call,
            [loginBodyModel],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i7.AuthEntity>>);
}
